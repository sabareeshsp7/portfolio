---
// Roadmap section data - Updated for step-based journey
const roadmapData = {
  title: "My Developer Journey",
  subtitle: "Follow the path of my growth and achievements",
  milestones: [
    {
      id: "about",
      step: "01",
      title: "About Me",
      label: "INTRODUCTION",
      description: "Learn about my background, skills, and passion for technology",
      icon: "üë®‚Äçüíª",
      color: "from-teal-400 to-emerald-500",
      position: "top"
    },
    {
      id: "skills", 
      step: "02",
      title: "Skills",
      label: "EXPERTISE",
      description: "My technical skills and development stack",
      icon: "‚ö°",
      color: "from-cyan-400 to-teal-500",
      position: "bottom"
    },
    {
      id: "projects",
      step: "03", 
      title: "Projects",
      label: "PORTFOLIO",
      description: "Explore my AI/ML projects and web applications",
      icon: "üöÄ",
      color: "from-blue-400 to-cyan-500",
      position: "top"
    },
    {
      id: "experience",
      step: "04",
      title: "Experience", 
      label: "JOURNEY",
      description: "My professional and academic experience",
      icon: "üéØ",
      color: "from-purple-400 to-pink-500",
      position: "bottom"
    },
    {
      id: "contact",
      step: "05",
      title: "Contact",
      label: "CONNECTION",
      description: "Ready to collaborate? Let's connect and build together",
      icon: "üìß", 
      color: "from-orange-400 to-red-500",
      position: "top"
    }
  ]
};
---

<section id="roadmap" class="py-20 px-8 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 relative overflow-hidden">
  <div class="max-w-6xl mx-auto">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-black text-white mb-4">
        <span class="bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
          {roadmapData.title}
        </span>
      </h2>
      <p class="text-lg text-gray-300 max-w-2xl mx-auto">
        {roadmapData.subtitle}
      </p>
    </div>    <!-- Interactive Roadmap -->
    <div class="relative h-[700px] sm:h-[600px] md:h-[500px] lg:h-[400px] mx-auto max-w-7xl">
      <!-- Roadmap SVG -->
      <div class="absolute inset-0 flex items-center justify-center">
        <svg 
          class="w-full h-full" 
          viewBox="0 0 1200 400" 
          xmlns="http://www.w3.org/2000/svg"
          aria-hidden="true"
          preserveAspectRatio="xMidYMid meet"
        >
          <defs>
            <!-- Road gradient -->
            <linearGradient id="roadGradient" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" style="stop-color:#374151;stop-opacity:1" />
              <stop offset="50%" style="stop-color:#4B5563;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#374151;stop-opacity:1" />
            </linearGradient>
            
            <!-- Dashed line gradient -->
            <linearGradient id="dashGradient" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" style="stop-color:#FBBF24;stop-opacity:0.8" />
              <stop offset="50%" style="stop-color:#F59E0B;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#FBBF24;stop-opacity:0.8" />
            </linearGradient>
          </defs>          <!-- Main wavy road path - More pronounced curves to match reference -->
          <path 
            d="M 50 200 Q 150 120 250 180 Q 350 240 450 160 Q 550 80 650 140 Q 750 200 850 120 Q 950 40 1050 100 Q 1150 160 1150 120"
            stroke="url(#roadGradient)" 
            stroke-width="60" 
            fill="none" 
            stroke-linecap="round"
            class="road-path"
          />
          
          <!-- Road borders -->
          <path 
            d="M 50 170 Q 150 90 250 150 Q 350 210 450 130 Q 550 50 650 110 Q 750 170 850 90 Q 950 10 1050 70 Q 1150 130 1150 90"
            stroke="#1F2937" 
            stroke-width="2" 
            fill="none" 
            stroke-linecap="round"
          />
          
          <path 
            d="M 50 230 Q 150 150 250 210 Q 350 270 450 190 Q 550 110 650 170 Q 750 230 850 150 Q 950 70 1050 130 Q 1150 190 1150 150"
            stroke="#1F2937" 
            stroke-width="2" 
            fill="none" 
            stroke-linecap="round"
          />
          
          <!-- Center dashed line -->
          <path 
            d="M 50 200 Q 150 120 250 180 Q 350 240 450 160 Q 550 80 650 140 Q 750 200 850 120 Q 950 40 1050 100 Q 1150 160 1150 120"
            stroke="url(#dashGradient)" 
            stroke-width="3" 
            fill="none" 
            stroke-linecap="round"
            stroke-dasharray="20,15"
            class="center-line animate-dash"
          />
        </svg>
      </div>      <!-- Milestone Markers with Pin Design -->
        {roadmapData.milestones.map((milestone, index) => {
        // Enhanced positioning for better mobile/tablet alignment
        // Different coordinate sets for different screen sizes
        const positions = {
          mobile: [
            { x: '15%', y: '45%' },   // Step 01 - closer to left edge for mobile
            { x: '30%', y: '60%' },   // Step 02 - adjusted for mobile curve
            { x: '50%', y: '40%' },   // Step 03 - center position
            { x: '70%', y: '55%' },   // Step 04 - adjusted for mobile curve
            { x: '85%', y: '35%' }    // Step 05 - closer to right edge for mobile
          ],
          tablet: [
            { x: '18%', y: '50%' },   // Step 01 - tablet positioning
            { x: '32%', y: '45%' },   // Step 02 
            { x: '50%', y: '35%' },   // Step 03 
            { x: '68%', y: '30%' },   // Step 04 
            { x: '82%', y: '25%' }    // Step 05 
          ],
          desktop: [
            { x: '20.83%', y: '45%' },   // Step 01 - x=250/1200=20.83%, y=180/400=45%
            { x: '37.5%', y: '40%' },    // Step 02 - x=450/1200=37.5%, y=160/400=40%
            { x: '54.17%', y: '35%' },   // Step 03 - x=650/1200=54.17%, y=140/400=35%
            { x: '70.83%', y: '30%' },   // Step 04 - x=850/1200=70.83%, y=120/400=30%
            { x: '87.5%', y: '25%' }     // Step 05 - x=1050/1200=87.5%, y=100/400=25%
          ]
        };
        
        const pos = positions.desktop[index]; // Default to desktop
        const isTop = milestone.position === 'top';
        
        return (
          <div 
            class={`absolute group cursor-pointer transform -translate-x-1/2 -translate-y-1/2 milestone-pin milestone-${index + 1}`}
            style={`left: ${pos.x}; top: ${pos.y};`}
            onclick={`navigateToSection('${milestone.id}')`}
            data-milestone={milestone.id}
          >            <!-- Pin marker positioned ON the road -->
            <div class={`relative flex flex-col items-center milestone-container ${isTop ? '' : 'flex-col-reverse'}`}>
              <!-- Icon and label positioned above/below the pin -->
              <div class={`flex flex-col items-center milestone-content ${isTop ? 'mb-3 sm:mb-4' : 'mt-3 sm:mt-4'}`}>
                <!-- Icon circle -->
                <div class="bg-gray-800 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center border-2 border-gray-600 mb-2 shadow-lg transition-all duration-300 group-hover:border-gray-400">
                  <span class="text-lg sm:text-xl">{milestone.icon}</span>
                </div>
                
                <!-- Label -->
                <div class="text-center">
                  <h4 class="text-xs font-bold text-white mb-1 tracking-wider">{milestone.label}</h4>
                  <p class="text-xs text-gray-400 font-medium">{milestone.title}</p>
                </div>
              </div>
              
              <!-- Pin pointer pointing to road -->
              <div class={`w-0 h-0 border-l-[6px] border-r-[6px] sm:border-l-[8px] sm:border-r-[8px] border-l-transparent border-r-transparent ${isTop ? 'border-t-[12px] sm:border-t-[16px] border-t-white' : 'border-b-[12px] sm:border-b-[16px] border-b-white'}`}></div>
              
              <!-- Step number pin - positioned ON the road -->
              <div class={`relative bg-gradient-to-br ${milestone.color} rounded-full w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 flex items-center justify-center shadow-2xl border-3 sm:border-4 border-white group-hover:scale-110 transition-all duration-300 z-10 milestone-pin-circle`}>
                <div class="bg-white rounded-full w-8 h-8 sm:w-9 sm:h-9 md:w-10 md:h-10 flex items-center justify-center shadow-inner">
                  <span class="text-gray-800 font-black text-sm sm:text-base md:text-lg">{milestone.step}</span>
                </div>
                <!-- Inner glow effect -->
                <div class="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-full"></div>
              </div>
            </div>              <!-- Hover tooltip -->
            <div class={`absolute ${isTop ? '-top-40 sm:-top-44' : 'top-28 sm:top-32'} left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none z-20`}>
              <div class="bg-gray-900/95 backdrop-blur-sm border border-gray-700 rounded-xl p-3 sm:p-4 shadow-2xl w-64 sm:w-72">
                <div class="flex items-center gap-3 mb-2">
                  <div class="text-lg sm:text-2xl">{milestone.icon}</div>
                  <div>
                    <h3 class="text-xs sm:text-sm font-bold text-white">{milestone.title}</h3>
                    <span class="text-xs text-gray-400 font-medium tracking-wider">{milestone.label}</span>
                  </div>
                </div>
                <p class="text-xs text-gray-300 leading-relaxed">{milestone.description}</p>
                <div class="text-xs text-blue-400 mt-3 font-medium">Click to explore ‚Üí</div>
              </div>
              <!-- Tooltip arrow -->
              <div class={`absolute left-1/2 transform -translate-x-1/2 w-0 h-0 ${isTop ? 'top-full border-l-[8px] border-r-[8px] border-t-[8px] border-l-transparent border-r-transparent border-t-gray-900' : 'bottom-full border-l-[8px] border-r-[8px] border-b-[8px] border-l-transparent border-r-transparent border-b-gray-900'}`}></div>
            </div>
          </div>
        );
      })}<!-- Green starting point - Start of road -->
      <div class="absolute bottom-20 left-4 md:left-8 lg:left-12">
        <div class="w-12 h-12 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center shadow-lg border-3 border-white animate-bounce">
          <span class="text-lg">üèÅ</span>
        </div>
        <div class="absolute top-14 left-1/2 transform -translate-x-1/2">
          <span class="text-green-400 font-bold text-sm whitespace-nowrap">Start Here</span>
        </div>
      </div>
    </div>    <!-- Call to Action -->
    <div class="text-center mt-12">
      <p class="text-gray-400 mb-6">
        üöÄ Ready to explore my journey? Click on any milestone to begin!
      </p>
      <div class="flex flex-wrap justify-center gap-3">
        {roadmapData.milestones.map((milestone) => (
          <button 
            onclick={`navigateToSection('${milestone.id}')`}
            class={`bg-gradient-to-r ${milestone.color} hover:scale-105 text-white font-bold py-2 px-4 rounded-full transition-all duration-300 text-sm shadow-lg`}
          >
            {milestone.icon} {milestone.title}
          </button>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  /* Roadmap animations */
  [data-milestone] {
    animation: milestone-appear 0.8s ease-out forwards;
    opacity: 0;
    transform: scale(0.8) translateY(20px);
  }
  
  [data-milestone="about"] { animation-delay: 0.2s; }
  [data-milestone="skills"] { animation-delay: 0.4s; }
  [data-milestone="projects"] { animation-delay: 0.6s; }
  [data-milestone="experience"] { animation-delay: 0.8s; }
  [data-milestone="contact"] { animation-delay: 1.0s; }
  
  @keyframes milestone-appear {
    from {
      opacity: 0;
      transform: scale(0.8) translateY(20px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }
  
  /* Road animation */
  .road-path {
    stroke-dasharray: 3000;
    stroke-dashoffset: 3000;
    animation: draw-road 3s ease-in-out forwards;
  }
  
  .center-line {
    animation: animate-dash 2s linear infinite;
  }
  
  @keyframes draw-road {
    to {
      stroke-dashoffset: 0;
    }
  }
  
  @keyframes animate-dash {
    from {
      stroke-dashoffset: 35;
    }
    to {
      stroke-dashoffset: 0;
    }
  }  
  /* Responsive design with better device-specific positioning */
  @media (max-width: 640px) {
    .relative.h-\[700px\] {
      height: 600px;
    }
    
    /* Mobile-specific pin positioning */
    .milestone-1 { left: 15% !important; top: 45% !important; }
    .milestone-2 { left: 30% !important; top: 60% !important; }
    .milestone-3 { left: 50% !important; top: 40% !important; }
    .milestone-4 { left: 70% !important; top: 55% !important; }
    .milestone-5 { left: 85% !important; top: 35% !important; }
    
    /* Adjust SVG road for mobile */
    svg {
      transform: scale(1.1);
    }
    
    /* Mobile pin adjustments */
    [data-milestone] .milestone-content {
      margin-bottom: 0.5rem;
      margin-top: 0.5rem;
    }
    
    /* Smaller tooltips for mobile */
    [data-milestone] .w-64 {
      width: 14rem;
    }
    
    /* Better text sizes for mobile */
    [data-milestone] .text-xs {
      font-size: 0.625rem;
      line-height: 1.2;
    }
  }
  
  @media (min-width: 641px) and (max-width: 768px) {
    .relative.h-\[700px\] {
      height: 550px;
    }
    
    /* Tablet-specific pin positioning */
    .milestone-1 { left: 18% !important; top: 50% !important; }
    .milestone-2 { left: 32% !important; top: 45% !important; }
    .milestone-3 { left: 50% !important; top: 35% !important; }
    .milestone-4 { left: 68% !important; top: 30% !important; }
    .milestone-5 { left: 82% !important; top: 25% !important; }
  }
  
  @media (min-width: 769px) and (max-width: 1024px) {
    .relative.h-\[700px\] {
      height: 500px;
    }
    
    /* Tablet landscape positioning */
    .milestone-1 { left: 19% !important; top: 47% !important; }
    .milestone-2 { left: 35% !important; top: 42% !important; }
    .milestone-3 { left: 52% !important; top: 37% !important; }
    .milestone-4 { left: 69% !important; top: 32% !important; }
    .milestone-5 { left: 84% !important; top: 27% !important; }
  }
  
  @media (min-width: 1025px) {
    .relative.h-\[700px\] {
      height: 400px;
    }
    
    /* Desktop positioning - use original coordinates */
    .milestone-1 { left: 20.83% !important; top: 45% !important; }
    .milestone-2 { left: 37.5% !important; top: 40% !important; }
    .milestone-3 { left: 54.17% !important; top: 35% !important; }
    .milestone-4 { left: 70.83% !important; top: 30% !important; }
    .milestone-5 { left: 87.5% !important; top: 25% !important; }
  }
  
  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    [data-milestone],
    .road-path,
    .center-line {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }
    /* Enhanced pin design */
  [data-milestone] .bg-gradient-to-br {
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }
  
  [data-milestone]:hover .bg-gradient-to-br {
    box-shadow: 0 12px 48px rgba(0, 0, 0, 0.4);
    transform: translateY(-2px);
  }
  
  /* Pin pointer styling */
  .border-l-\[8px\] {
    border-left-width: 8px;
  }
  
  .border-r-\[8px\] {
    border-right-width: 8px;
  }
  
  .border-t-\[16px\] {
    border-top-width: 16px;
  }
  
  .border-b-\[16px\] {
    border-bottom-width: 16px;
  }
  
  /* Smooth transitions */
  [data-milestone] {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  [data-milestone]:hover {
    transform: translateY(-4px);
  }
</style>

<script>
  import { animate } from "motion";

  // Navigation function
  function navigateToSection(sectionId: string) {
    const section = document.getElementById(sectionId);
    if (section) {
      section.scrollIntoView({ 
        behavior: 'smooth',
        block: 'start'
      });
      
      // Add a subtle highlight effect to the target section
      section.classList.add('highlight-section');
      setTimeout(() => {
        section.classList.remove('highlight-section');
      }, 2000);
    }
  }
  // Make function globally available
  (window as any).navigateToSection = navigateToSection;

  // Animate roadmap on scroll
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const milestones = entry.target.querySelectorAll('[data-milestone]');
        milestones.forEach((milestone, index) => {
          setTimeout(() => {
            animate(
              milestone,
              { 
                opacity: [0, 1], 
                transform: ['scale(0.5) translateY(20px)', 'scale(1) translateY(0)'] 
              },
              { duration: 0.6 }
            );
          }, index * 200);
        });
      }
    });
  }, { threshold: 0.3 });

  // Observe the roadmap section
  const roadmapSection = document.querySelector('section');
  if (roadmapSection) {
    observer.observe(roadmapSection);
  }
  // Add interactive effects
  document.querySelectorAll('[data-milestone]').forEach(milestone => {
    milestone.addEventListener('mouseenter', () => {
      const circleElement = milestone.querySelector('.w-16') as HTMLElement;
      if (circleElement) {
        animate(
          circleElement,
          { scale: [1, 1.15, 1.1] },
          { duration: 0.3 }
        );
      }
    });
    
    milestone.addEventListener('mouseleave', () => {
      const circleElement = milestone.querySelector('.w-16') as HTMLElement;
      if (circleElement) {
        animate(
          circleElement,
          { scale: [1.1, 1] },
          { duration: 0.3 }
        );
      }
    });
    
    milestone.addEventListener('click', () => {
      const circleElement = milestone.querySelector('.w-16') as HTMLElement;
      if (circleElement) {
        animate(
          circleElement,
          { scale: [1, 0.95, 1] },
          { duration: 0.2 }
        );
      }
    });
  });
</script>
